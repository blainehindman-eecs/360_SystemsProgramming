                CS 360 LAB Assignment #2 PRE-WORK
                  DUE : Sept 15, 2014 IN CLASS
                        Turn in a HARD copy 

1. A binary executable file, a.out, consists of

           |header| Code | Data |<-BSS->|

where BSS is for uninitialized globals and uninitialized static locals.
BSS is NOT in a.out. Only its size is recorded in the header of a.out.

The Unix command   size a.out  shows the size of TEXT, DATA, BSS of a.out.

Use the following C program, t1.c, to generate t2.c, t3.c,.. t6.c as specified
below. 
        //********** t1.c file ************
          int g;                              
          main()                              
          {                                   
             int a,b,c; 
             a = 1; b = 2; 
             c = a + b;
             printf("c=%d\n", c);
          }                                

t2.c: Change the global variable  g  to  int g=3;
t3.c  Change the global variable  g  to  int g[10000];
t4.c  Change the global variable  g  to  int g[10000] = {4};
t5.c  Change the local variables of main() to
                 int a,b,c, d[10000];
t6.c. Change the local variables of main() to
          static int a,b,c, d[10000];

(A). For each case, use cc -m32 t.c to generate a.out. 
     Then use  ls -l a.out to get a.out size, and run size a.out to get its 
     section sizes. Record the observed sizes in a table:

          Case  | a.out |  TEXT  |  DATA  |  BSS   |
        --------------------------------------------
          (1)   |       |        |        |        |
        --------------------------------------------  
          (2)
        --------------------------------------------
          (3)
        --------------------------------------------
          (4)
        --------------------------------------------
          (5)
        --------------------------------------------        
          (6)
        --------------------------------------------

                  ANSWER THESE QUESTIONS:

   1. Variables in C may be classified as

          globals ---|--- UNINITIALIZED  globals;
                     |---   INITIALIZED  globals;

          locals  ---|--- AUTOMATIC locals;
                     |--- STATIC    locals;

   In terms of the above classification and the variables g, a, b, c, d,

      Which variables are in DATA? ______________________________________
      Which variables are in BSS ? ______________________________________

   2. In terms of the TEXT, DATA and BSS sections,
      Which sections are in a.out, which section is NOT in a.out?
      WHY?______________________________________________________

  (B). For each case, use   cc -m32 -static t.c   to generate a.out.
       Record the sizes again and compare them with the sizes in (A).
       WHAT DO YOU SEE?_________________________________________________

       WHY?______________________________________________________________

===============================================================================

2.Given: s.s file in assembly code and t.c file in C.
  Under Linux, run   cc -m32 t.c s.s   to generate a.out

In the program, the function calling sequence is

   crt0.o --> main() --> A() --> B() --> C();

The stack contents should be as follows:

HIGH                                                                      LOW  
-------------------------------------------------------------------------
    XX|main frame|parmToA|A frame|parmToB|B frame|parmToC|C frame|
---------------------------------------------------------|-------|-------  
                                                       CPU.FP   CPU.sp

This part of the assignment is for YOU to verify these.

#------------- s.s file -------------------
        .global get_ebp 
get_ebp: 
         movl %ebp, %eax
         ret

/************* t.c file ********************/

// FILL IN  #include files

main(int argc, char *argv[], char *env[])
{
  int a,b,c;
  printf("enter main\n");
  
  printf("&argc=%x argv=%x env=%x\n", &argc, argv, env);
  printf("&a=%x &b=%x &c=%x\n", &a, &b, &c);

  a=1; b=2; c=3;
  A(a,b);
  printf("exit main\n");
}

int A(int x, int y)
{
  int d,e,f;
  printf("enter A\n");
  // PRINT ADDRESS OF d, e, f

  d=3; e=4; f=5;
  B(d,e);
  printf("exit A\n");
}

int B(int x, int y)
{
  int g,h,i;
  printf("enter B\n");
  // PRINT ADDRESS OF g,h,i

  g=6; h=7; i=8;
  C(g,h);
  printf("exit B\n");
}

int *p, ebp;

int C(int x, int y)
{
  int u, v, w;
  printf("enter C\n");
  // PRINT ADDRESS OF u,v,w;
  
  u=9; v=10; w=11;

  /*********** Write C code to DO ************ 
        (1)-(5) AS SPECIFIED BELOW 
  *******************************************/

  printf("exit C\n");
}

=============================================================================

(1). ebp = get_ebp();   // call get_ebp() in s.s file
     Print ebp value in HEX

(2). Let p point at the local variable w;
     Print in HEX 100 entries of the stack contents starting from p:

              Address      Contents
             ---------    ----------

             ---------    ---------- 

(3). Run the program as   a.out > outfile
     On a hard copy of the outfile, use the addresses of the local variables to
     IDENTIFY and EXPLAIN the stack contents in terms of the function stack 
     frames, i.e. local variables, parameters, return address, etc. 

(4). ebp is the STACK FRAME pointer of the function C.
     PRINT the STACK FRAME link list, which ends with a 0.

(5). If you run the program as   
            a.out one two three > outfile
     IDENTIFY the parameters to main(), i.e. where are   
            argc, argv[ ], env[ ] 
     located?
